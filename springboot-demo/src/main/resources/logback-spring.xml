<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true" scanPeriod="60 seconds" debug="false">

    <!--文件名默认为logback-spring.xml springboot自动识别-->

    <!--显示标题，上下文标题-->
    <contextName>logback-demo</contextName>
    <!--属性值，使用${} 进行获取 这里的值可以通过application.yml进行获取-->
    <property name="logback.logdir" value="f:/log"/>
    <property name="logback.appname" value="app"/>


    <!--输出到控制台 ConsoleAppender-->
    <appender name="consoleLog" class="ch.qos.logback.core.ConsoleAppender">
        <!--展示格式 -->
        <layout class="ch.qos.logback.classic.PatternLayout">
            <pattern>
                <pattern>%d{HH:mm:ss.SSS} %contextName [%thread] %-5level %logger{36} ： %msg%n</pattern>
            </pattern>
        </layout>
        <!--详细解释-->
        <!--
            %d{HH: mm:ss.SSS}——日志输出时间
            %contextName 表示标签<contextName>包含的标题名称
            %thread——输出日志的进程名字，这在Web应用以及异步任务处理中很有用
            %-5level——日志级别，并且使用5个字符靠左对齐
            %logger{36}——日志输出者的名字
            %msg——日志消息
            %n——平台的换行符
        -->
        <!--
           <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
                <level>ERROR</level>
           </filter>
        -->
        <!--ThresholdFilter为系统定义的拦截器，例如我们用ThresholdFilter来过滤掉ERROR级别以下的日志不输出到文件中。
            如果不用记得注释掉，不然你控制台会发现没日志-->
    </appender>

    <!--输出到文件，切分文件日志 RollingFileAppender 这里是info的信息-->
    <appender name="fileInfoLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--
            如果只是想要 Info 级别的日志，只是过滤 info 还是会输出 Error 日志，因为 Error 的级别高，
            可以使用下面的策略，可以避免输出 Error 的日志
        -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <!--过滤 Error-->
            <level>ERROR</level>
            <!--匹配到就禁止-->
            <onMatch>DENY</onMatch>
            <!--没有匹配到就允许-->
            <onMismatch>ACCEPT</onMismatch>
        </filter>

        <!--
            日志名称，如果没有File属性，那么只会使用FileNamePattern的文件路径规则
            如果同时有<File>和<FileNamePattern>
            那么当天日志是<File>，明天会自动把今天的日志改名为今天的日期
            即<File> 的日志都是当天的。
       -->
        <File>${logback.logdir}/info.${logback.appname}.log</File>

        <!--滚动策略，按照时间滚动 TimeBasedRollingPolicy-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">

            <!--文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间-->
            <!-- 归档的日志文件的路径，例如今天是2013-12-21日志，当前写的日志文件路径为file节点指定，可以将此文件与file指定文件路径设置为不同路径，从而将当前日志文件或归档日志文件置不同的目录。
           而2013-12-21的日志文件在由fileNamePattern指定。%d{yyyy-MM-dd}指定日期格式，%i指定索引 -->
            <FileNamePattern>${logback.logdir}/info.${logback.appname}.%d{yyyy-MM-dd}.%i.log</FileNamePattern>

            <!-- 除按日志记录之外，还配置了日志文件不能超过2M，若超过2M，日志文件会以索引0开始，
            命名日志文件，例如info-app-2017-12-21.0.log -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>2MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>

            <!--只保留最近90天的日志-->
            <maxHistory>90</maxHistory>

            <!--用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志-->
            <!--<totalSizeCap>1GB</totalSizeCap>-->
        </rollingPolicy>

        <!--日志输出编码格式化-->
        <encoder>
            <charset>UTF-8</charset>
            <pattern>%d [%thread] %-5level %logger{36} %line - %msg%n</pattern>
        </encoder>

        <!-- 追加方式记录日志 -->
        <append>true</append>
    </appender>


    <!--输出到文件，切分文件日志 RollingFileAppender 这里是error的信息-->
    <appender name="fileErrorLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>Error</level>
        </filter>
        <File>${logback.logdir}/error.${logback.appname}.log</File>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间，注意这里没有%i-->
            <FileNamePattern>${logback.logdir}/error.${logback.appname}.%d{yyyy-MM-dd}.log</FileNamePattern>
            <maxHistory>90</maxHistory>
            <!--<totalSizeCap>1GB</totalSizeCap>-->
        </rollingPolicy>
        <encoder>
            <charset>UTF-8</charset>
            <pattern>%d [%thread] %-5level %logger{36} %line - %msg%n</pattern>
        </encoder>
        <append>true</append>
    </appender>



    <!--根控制器：指定最基础的日志输出级别

        root节点是必选节点，用来指定最基础的日志输出级别，只有一个level属性。
        level:用来设置打印级别，大小写无关：
            TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，不能设置为INHERITED或者同义词NULL。
            默认是DEBUG。
            可以包含零个或多个元素，标识这个appender将会添加到这个loger。
    -->
    <!--此处配置了springProfile ，里面有root-->
    <!--<root level="INFO">-->
        <!--&lt;!&ndash;appender将会添加到这个loger&ndash;&gt;-->
        <!--<appender-ref ref="consoleLog"/>-->
        <!--<appender-ref ref="fileInfoLog"/>-->
        <!--<appender-ref ref="fileErrorLog"/>-->
    <!--</root>-->

    <!--子控制器：针对单独一个类进行日志设置 -->
    <!--additivity属性为false，表示此loger的打印信息不再向上级传递; 不写默认为true

        此时执行com.stt.ch03_log.LogController类的方法时，
        先执行<logger>,将级别为“WARN”及大于“WARN”的日志信息交给此loger指定的名为“console”的appender处理，
        在控制台中打出日志，不再向上级root传递打印信息

        若把改成additivity="true"的话，就会打印两次，因为打印信息向上级传递，
        logger本身打印一次，root接到后又打印一次

     -->
    <!--<logger name="com.stt.ch03_log.LogController" level="WARN" additivity="false">-->
        <!--<appender-ref ref="consoleLog"/>-->
    <!--</logger>-->

    <!--多环境日志输出-->
    <!-- 测试环境+开发环境. 多个使用逗号隔开 -->
    <springProfile name="test,dev">
        <root level="INFO">
            <appender-ref ref="consoleLog"/>
            <appender-ref ref="fileInfoLog"/>
            <appender-ref ref="fileErrorLog"/>
        </root>
    </springProfile>

    <!-- 生产环境 -->
    <springProfile name="prod">
        <logger name="com.stt.ch03_log.LogController" level="WARN" additivity="false">
            <appender-ref ref="consoleLog"/>
        </logger>
    </springProfile>

</configuration>